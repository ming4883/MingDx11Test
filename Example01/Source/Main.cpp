/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"

using namespace mdk;

//==============================================================================
class Example01 : public D3D11Demo
{
public:
    Example01()
    {
    }
    
    ~Example01()
    {
    }

    struct CBAppData
    {
        float time;
        cb_nextrow
        Mat44f viewprojMatrix;
    };

    bool demoStartup()
    {
        set_app_data_dir ("Media");

        Hold<ID3DBlob> pscode = d3d11.loadShaderFromAppData ("Test.pso");
        Hold<ID3DBlob> vscode = d3d11.loadShaderFromAppData ("Test.vso");

        if (m_isnull (vs_.set (d3d11.createVertexShader (vscode))))
            return false;

        if (m_isnull (ps_.set (d3d11.createPixelShader (pscode))))
            return false;

        D3D11_INPUT_ELEMENT_DESC idesc;
        idesc.SemanticName = "POSITION";
        idesc.SemanticIndex = 0;
        idesc.Format = DXGI_FORMAT_R32G32B32A32_FLOAT;
        idesc.InputSlot = 0;
        idesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
        idesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
        idesc.InstanceDataStepRate = 0;

        if (m_isnull (il_.set (d3d11.createInputLayout (&idesc, 1, vscode))))
            return false;

        Vec4f vtx[] = {
            Vec4f ( 0.0f, 1.0f, 0.0f, 1.0f),
            Vec4f ( 1.0f,-1.0f, 0.0f, 1.0f),
            Vec4f (-1.0f,-1.0f, 0.0f, 1.0f),
        };

        if (m_isnull (vb_.set (d3d11.createVertexBuffer (sizeof (vtx), false, true, vtx))))
            return false;

        if (m_isnull (tx_.set (d3d11.createTexture2DFromAppData ("Test.png"))))
            return false;

        if (m_isnull (sv_.set (d3d11.createShaderResourceView (tx_))))
            return false;

        if (m_isnull (cb_.set (d3d11.createConstantBuffer<CBAppData>())))
            return false;

        return true;
    }

    void demoShutdown()
    {
        vs_.set (nullptr);
        ps_.set (nullptr);
        il_.set (nullptr);
        vb_.set (nullptr);
        tx_.set (nullptr);
        sv_.set (nullptr);
        cb_.set (nullptr);
    }

    void demoUpdate ()
    {
        Vec4f rgba (0.25f, 0.25f, 1.0f, 1.0f);
        D3D11_VIEWPORT vp = getViewport (0.0f, 0.0f, 1.0f, 1.0f);

        cam_.transform.position = Vec3f (0, 0, 8);
        cam_.updateD3D (getAspect());
        
        CBAppData appData;
        appData.time = 1.0f + cosf (timeGetAccumMS<float>() / 2048.0f) * 0.5f + 0.5f;
        Mat::mul (appData.viewprojMatrix, cam_.projectionMatrix, cam_.viewMatrix);
        d3d11.updateBuffer (cb_, appData);
        
        d3d11.contextIM->OMSetRenderTargets (1, d3d11.backBufRTView, nullptr);
        d3d11.contextIM->ClearRenderTargetView (d3d11.backBufRTView, (float*)&rgba);
        d3d11.contextIM->RSSetViewports (1, &vp);

        UINT stride = sizeof (Vec4f);
        UINT offset = 0;
        
        d3d11.contextIM->IASetVertexBuffers (0, 1, vb_, &stride, &offset);
        d3d11.contextIM->IASetInputLayout (il_);
        d3d11.contextIM->IASetPrimitiveTopology (D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

        d3d11.contextIM->VSSetShader (vs_, nullptr, 0);
        d3d11.contextIM->VSSetConstantBuffers (0, 1, cb_);

        d3d11.contextIM->PSSetShader (ps_, nullptr, 0);
        d3d11.contextIM->PSSetShaderResources (0, 1, sv_);
        d3d11.contextIM->PSSetSamplers (0, 1, d3d11.sampWrapPoint);

        d3d11.contextIM->Draw (3, 0);

        d3d11.swapchain->Present (0u, 0u);
    }

    Camera cam_;
    Hold<ID3D11VertexShader> vs_;
    Hold<ID3D11PixelShader> ps_;
    Hold<ID3D11InputLayout> il_;
    Hold<ID3D11Buffer> vb_;
    Hold<ID3D11Texture2D> tx_;
    Hold<ID3D11ShaderResourceView> sv_;
    Hold<ID3D11Buffer> cb_;
};

//==============================================================================
class Example01Application  : public DemoApplication<Example01>
{
public:
    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (Example01Application)
