/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"

using namespace mdk;

//==============================================================================
class Example02 : public D3D11Demo
{
public:
    Example02()
    {
    }
    
    ~Example02()
    {
    }

    struct CBAppData
    {
        float time;
    };

    bool demoStartup()
    {
        set_app_data_dir ("Media");

        if (m_isnull (cb_.set (d3d11.createConstantBuffer<CBAppData>())))
            return false;

        scene_ = new D3D11Scene;

        ScopedPointer<InputStream> stream = appDataGet ("Boxes.babylon");

        if (m_isnull (stream))
            return false;

        BabylonFile file;
        file.read (stream);

        D3D11BabylonFileAdaptor adapter (d3d11, *scene_);
        
        file.adopt (&adapter);

        return true;
    }

    void demoShutdown()
    {
        cb_.set (nullptr);
        scene_ = nullptr;
    }

    void demoUpdate ()
    {
        Vec4f rgba (0.25f, 0.25f, 1.0f, 1.0f);
        D3D11_VIEWPORT vp = getViewport (0.0f, 0.0f, 1.0f, 1.0f);
        
        CBAppData appData;
        appData.time = 1.0f + cosf (timeGetAccumMS<float>() / 2048.0f) * 0.5f + 0.5f;
        d3d11.updateBuffer (cb_, appData);
        
        d3d11.contextIM->OMSetRenderTargets (1, d3d11.backBufRTView, nullptr);
        d3d11.contextIM->ClearRenderTargetView (d3d11.backBufRTView, (float*)&rgba);
        d3d11.contextIM->RSSetViewports (1, &vp);

        d3d11.swapchain->Present (0u, 0u);
    }

    Hold<ID3D11Buffer> cb_;
    ScopedPointer<D3D11Scene> scene_;
};

//==============================================================================
class Example02Application  : public DemoApplication<Example02>
{
public:
    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (Example02Application)
